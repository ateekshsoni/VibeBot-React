/**
 * SIMPLE INSTAGRAM CONNECTION UTILITY
 * No complex hooks, no dependencies, just direct API calls
 */

/**
 * Get token from Clerk with multiple fallback methods
 */
export const getClerkToken = async (auth, user, session) => {
  console.log("üîç Attempting to get Clerk token...");

  // Method 1: auth.getToken()
  if (auth && typeof auth.getToken === "function") {
    try {
      console.log("üîÑ Trying auth.getToken()...");
      const token = await auth.getToken();
      if (token) {
        console.log("‚úÖ Token obtained via auth.getToken()");
        return { token, method: "auth.getToken()" };
      }
    } catch (error) {
      console.warn("‚ùå auth.getToken() failed:", error.message);
    }
  }

  // Method 2: user.getToken()
  if (user && typeof user.getToken === "function") {
    try {
      console.log("üîÑ Trying user.getToken()...");
      const token = await user.getToken();
      if (token) {
        console.log("‚úÖ Token obtained via user.getToken()");
        return { token, method: "user.getToken()" };
      }
    } catch (error) {
      console.warn("‚ùå user.getToken() failed:", error.message);
    }
  }

  // Method 3: session.getToken()
  if (session && typeof session.getToken === "function") {
    try {
      console.log("üîÑ Trying session.getToken()...");
      const token = await session.getToken();
      if (token) {
        console.log("‚úÖ Token obtained via session.getToken()");
        return { token, method: "session.getToken()" };
      }
    } catch (error) {
      console.warn("‚ùå session.getToken() failed:", error.message);
    }
  }

  console.error("‚ùå All token methods failed");
  return { token: null, method: null };
};

/**
 * Connect to Instagram using multiple approaches
 */
export const connectInstagramSimple = async (auth, user, session) => {
  try {
    console.log("üöÄ Starting Instagram connection with direct Meta URL...");

    // Check authentication
    if (!auth?.isSignedIn) {
      throw new Error("User not authenticated");
    }

    // Step 1: Get user database ID from backend
    const { token } = await getClerkToken(auth, user, session);
    
    if (!token) {
      throw new Error("Unable to obtain authentication token");
    }

    console.log("üì§ Fetching user profile to get database ID...");
    
    try {
      // Add timeout to prevent hanging
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout

      const userResponse = await fetch(
        "https://vibeBot-v1.onrender.com/api/user/profile",
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          signal: controller.signal,
        }
      );

      clearTimeout(timeoutId);

      console.log("üì• User profile response status:", userResponse.status);

      if (!userResponse.ok) {
        throw new Error(`Failed to fetch user profile: ${userResponse.status} ${userResponse.statusText}`);
      }

      const userData = await userResponse.json();
      console.log("üë§ User data received:", userData);

      // Step 2: Create state parameter with user ID
      const userId = userData.user?._id || userData.data?._id || userData._id;
      
      if (!userId) {
        console.error("‚ùå No user ID found in response:", userData);
        throw new Error("User ID not found in profile response");
      }

      const state = `user_${userId}_${Date.now()}`;
      console.log("üîê Generated state parameter:", state);

      // Step 3: Direct redirect to Instagram OAuth URL (provided by backend team)
      const instagramUrl = `https://www.instagram.com/oauth/authorize?force_reauth=true&client_id=1807810336807413&redirect_uri=https%3A%2F%2FvibeBot-v1.onrender.com%2Fapi%2Fauth%2Finstagram%2Fcallback&response_type=code&scope=instagram_business_basic%2Cinstagram_business_manage_messages%2Cinstagram_business_manage_comments%2Cinstagram_business_content_publish%2Cinstagram_business_manage_insights&state=${state}`;

      console.log("üîó Redirecting to Instagram OAuth URL:");
      console.log(instagramUrl);
      
      // Redirect to Instagram OAuth
      window.location.href = instagramUrl;

    } catch (error) {
      if (error.name === 'AbortError') {
        console.error("‚ùå Request timed out after 10 seconds");
        throw new Error("Connection timeout - please try again");
      }
      throw error;
    }

  } catch (error) {
    console.error("‚ùå Instagram connection failed:", error);
    throw error;
  }
};
  try {
    console.log("üöÄ Starting Instagram connection...");

    // Check authentication
    if (!auth?.isSignedIn) {
      throw new Error("User not authenticated");
    }

    // APPROACH 1: Try with token
    const { token, method } = await getClerkToken(auth, user, session);

    if (token) {
      console.log(`üîë Using token from ${method}`);
      console.log("üì§ Making API call to initiate endpoint...");

      try {
        // Add timeout to prevent hanging
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout

        console.log("üîó Calling:", "https://vibeBot-v1.onrender.com/api/auth/instagram/initiate");
        
        const response = await fetch(
          "https://vibeBot-v1.onrender.com/api/auth/instagram/initiate",
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
            signal: controller.signal,
          }
        );

        clearTimeout(timeoutId);

        console.log("ÔøΩ Response status:", response.status);
        console.log("üì• Response headers:", Object.fromEntries(response.headers.entries()));

        if (!response.ok) {
          console.error(`‚ùå HTTP Error: ${response.status} ${response.statusText}`);
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log("üìä Response data:", data);

        if (data.success && data.authUrl) {
          console.log("ÔøΩ Instagram OAuth URL received, redirecting...");
          console.log("üîó Redirecting to:", data.authUrl);
          window.location.href = data.authUrl;
          return;
        } else {
          console.error("‚ùå Initiate endpoint error:", data.error || "No authUrl provided");
          console.error("‚ùå Full response:", data);
          throw new Error(data.error || "Invalid response from server");
        }
      } catch (error) {
        if (error.name === 'AbortError') {
          console.error("‚ùå Request timed out after 15 seconds");
          throw new Error("Connection timeout - please try again");
        }
        console.error("‚ùå Token-based approach failed:", error);
        throw error; // Re-throw to avoid fallback approaches
      }
    } else {
      throw new Error("Unable to obtain authentication token");
    }
  } catch (error) {
    console.error("‚ùå Instagram connection failed:", error);
    throw error;
  }
};

/**
 * Check Instagram connection status
 */
export const checkInstagramStatusSimple = async (auth, user, session) => {
  try {
    const { token } = await getClerkToken(auth, user, session);

    if (!token) {
      return { connected: false, error: "No authentication token available" };
    }

    const response = await fetch(
      "https://vibeBot-v1.onrender.com/api/instagram/status",
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );

    if (response.ok) {
      const data = await response.json();
      return {
        connected: data.connected || false,
        username: data.username || null,
        error: null,
      };
    } else {
      return {
        connected: false,
        error: `HTTP ${response.status}: ${response.statusText}`,
      };
    }
  } catch (error) {
    console.error("‚ùå Error checking Instagram status:", error);
    return { connected: false, error: error.message };
  }
};
